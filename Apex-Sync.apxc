public class StudentNames {
		public static List<String> studentsOfClass(Id classId) {
      List<Student__c> studentList = new List<Student__c>();
        studentList = [select name from student__c where class__r.id = :classId ];
        List<String> stuList = new List<String>();
        for(Student__c s : studentList){
            stuList.add(s.name);
        }   
        return stuList;

    }
    	
     public static Map<String, Set<Id>> getClassNamesWithStudentIds() {
        Map<String, Set<Id>> classStudentMap = new Map<String, Set<Id>>();

        List<Student__c> students = [SELECT Id, Class__r.Name FROM Student__c];

        for (Student__c student : students) {
            String className = student.Class__r.Name;
            Id studentId = student.Id;
            if (!classStudentMap.containsKey(className)) {
                classStudentMap.put(className, new Set<Id>());
            }
            classStudentMap.get(className).add(studentId);
			
        }
        return classStudentMap;
    }
     public static Integer getWorkingDays(Date startDate, Date endDate) {
       Integer workingDays = 0;
        DateTime sdt1 = (DateTime)startDate;
        Datetime sdt2 = (DateTime)endDate;
        while(sdt1<sdt2){
            if(sdt1.format('E')!='sun' && sdt1.format('E')!='sat'){
                workingDays++;
            }
           sdt1=sdt1.addDays(1);
        }
        return workingDays;
    }
    public static List<Schema.SObjectType> getAllSObjects(){
        List<Schema.SObjectType> allSObjects = new List<Schema.SObjectType>();
        Map<String, Schema.SObjectType> gd = Schema.getGlobalDescribe();

		for(Schema.SObjectType thisObj : gd.values()) {
    		allSObjects.add(thisObj);
		}
        return allSObjects;
    } 

}